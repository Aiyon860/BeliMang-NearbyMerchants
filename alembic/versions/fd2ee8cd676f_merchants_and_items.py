"""merchants_and_items

Revision ID: fd2ee8cd676f
Revises:
Create Date: 2025-09-27 22:45:09.689614

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from geoalchemy2.types import Geography


# revision identifiers, used by Alembic.
revision: str = "fd2ee8cd676f"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Merchants
    op.create_table(
        "merchants",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        # When using enum in create_table, it will create the enum type automatically so be careful
        sa.Column(
            "merchant_category",
            sa.Enum(
                "SmallRestaurant",
                "MediumRestaurant",
                "LargeRestaurant",
                "MerchandiseRestaurant",
                "BoothKiosk",
                "ConvenienceStore",
                name="merchant_category_enum",
            ),
            nullable=False,
        ),
        sa.Column("image_url", sa.String(length=1024), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        # Don't need to create a separate index for geog, as PostGIS will use a GIST index automatically
        sa.Column(
            "geog",
            Geography(
                geometry_type="POINT",
                srid=4326,
                dimension=2,
                from_text="ST_GeogFromText",
                name="geography",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_merchants_name_trgm",
        "merchants",
        ["name"],
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    op.create_index(op.f("ix_merchants_id"), "merchants", ["id"], unique=False)

    # Items
    op.create_table(
        "items",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("merchant_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_items_id"), "items", ["id"], unique=False)
    op.create_index("idx_items_merchant_id", "items", ["merchant_id"], unique=False)
    op.create_index(
        "idx_items_name_trgm",
        "items",
        ["name"],
        postgresql_using="gin",
        postgresql_ops={"name": "gin_trgm_ops"},
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Items
    op.drop_index(op.f("ix_items_id"), table_name="items")
    op.drop_index("idx_items_merchant_id", table_name="items")
    op.drop_index("idx_items_name_trgm", table_name="items")
    op.drop_table("items")

    # Merchants
    op.drop_index(op.f("ix_merchants_id"), table_name="merchants")
    op.drop_index("idx_merchants_geog", table_name="merchants", postgresql_using="gist")
    op.drop_index("idx_merchants_name_trgm", table_name="merchants")
    op.drop_table("merchants")

    # Enums
    op.execute("DROP TYPE IF EXISTS merchant_category_enum CASCADE;")
    # ### end Alembic commands ###
